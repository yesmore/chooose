// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Comment       Comment[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Question {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  userName String @default("")

  title    String
  content  String
  likes    Int    @default(0)
  dislikes Int    @default(0)

  createdAt DateTime
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  answers  Answer[]
  comments Comment[]
}

model Answer {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  questionId String @db.ObjectId
  value      String
  click      Int    @default(0)

  Question Question @relation(fields: [questionId], references: [id])
}

model Comment {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  questionId String @db.ObjectId
  userId     String @db.ObjectId
  userName   String @default("")
  content    String
  likes      Int    @default(0)
  dislikes   Int    @default(0)

  createdAt DateTime
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user     User     @relation(fields: [userId], references: [id]) // 关联到 User 表的 id 字段
  Question Question @relation(fields: [questionId], references: [id])
}
